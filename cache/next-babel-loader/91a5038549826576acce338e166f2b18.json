{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { atom, selector } from 'recoil';\nimport { sortAsc, sortDesc } from './utils';\nimport api from '../../api';\nexport const winesState = atom({\n  key: 'wines',\n  default: []\n});\nexport const winesSortState = atom({\n  key: 'winesSort',\n  default: 'recommendations'\n});\nexport const winesPageState = atom({\n  key: 'winesPage',\n  default: {\n    from: 1,\n    to: 12\n  }\n});\nexport const formFiltersState = atom({\n  key: 'formFilters',\n  default: {\n    priceFrom: 0,\n    priceTo: 100000,\n    volume: [],\n    color: [],\n    sugar: [],\n    sort: [],\n    country: [],\n    region: [],\n    sparkling: []\n  }\n});\nexport const winesQuery = selector({\n  key: 'winesQuery',\n  get: async ({\n    get\n  }) => {\n    const winePage = get(winesPageState);\n    const wineFilter = get(formFiltersState);\n    const searchParameters = Object.keys(wineFilter).reduce((acc, el) => {\n      if (wineFilter[el] !== 0 && wineFilter[el].length !== 0) {\n        if (el === 'priceFrom') {\n          return acc.concat(`price>${wineFilter[el]};`);\n        }\n\n        if (el === 'priceTo') {\n          return acc.concat(`${acc.includes('price') ? '~' : ''}price<${wineFilter[el]};`);\n        }\n\n        const filters = wineFilter[el].reduce((a, e) => {\n          return a.concat(`${a.includes(el) ? '~' : ''}${el}:${e};`);\n        }, '');\n        return acc.concat(filters);\n      }\n\n      return acc;\n    }, '');\n\n    const body = _objectSpread(_objectSpread({}, winePage), {}, {\n      searchParameters\n    });\n\n    const response = await api.getAllWines(body);\n    return response;\n  }\n});\nexport const sortedWinesState = selector({\n  key: 'filteredTodoListState',\n  get: ({\n    get\n  }) => {\n    const list = get(winesState);\n    const sort = get(winesSortState);\n\n    switch (sort) {\n      case 'priceAsc':\n        return sortAsc(list);\n\n      case 'priceDesc':\n        return sortDesc(list);\n\n      default:\n        return list;\n    }\n  }\n});\nexport const sorts = atom({\n  key: 'sorts',\n  default: []\n});","map":null,"metadata":{},"sourceType":"module"}