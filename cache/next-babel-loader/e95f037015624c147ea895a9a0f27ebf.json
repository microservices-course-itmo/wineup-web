{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRecoilState } from 'recoil';\nimport InputContainer from '../InputContainer';\nimport { formFiltersState } from '../Catalog';\n\nconst FilterBar = () => {\n  const initialFormState = {\n    priceFrom: 0,\n    priceTo: 100000,\n    volume: [],\n    color: [],\n    sugar: [],\n    sort: [],\n    country: [],\n    region: [],\n    sparkling: []\n  };\n  const [formState, setFormState] = useRecoilState(formFiltersState);\n\n  const handleCheckoutChange = event => {\n    const {\n      name,\n      value,\n      checked\n    } = event.target;\n    const g = formState[name];\n    let newGroup = [];\n\n    if (checked) {\n      if (!g.includes(value)) {\n        newGroup = [...g, value];\n      }\n    } else {\n      newGroup = g.filter(item => item !== value);\n    }\n\n    setFormState(_objectSpread(_objectSpread({}, formState), {}, {\n      [name]: newGroup\n    }));\n  };\n\n  const handleInputChange = event => {\n    setFormState(_objectSpread(_objectSpread({}, formState), {}, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const inputGroupMap = {\n    price: {\n      id: 'price',\n      title: 'Цена',\n      type: 'number',\n      currency: 'RUB',\n      onChange: handleInputChange,\n      inputList: [{\n        id: 'priceFrom',\n        name: 'priceFrom',\n        defaultValue: formState.priceFrom,\n        textLabel: 'от'\n      }, {\n        id: 'priceTo',\n        name: 'priceTo',\n        defaultValue: formState.priceTo,\n        textLabel: 'до'\n      }]\n    },\n    volume: {\n      id: 'volume',\n      title: 'Объём',\n      type: 'checkbox',\n      onChange: handleCheckoutChange,\n      inputList: [{\n        id: 'volume_0_375',\n        name: 'volume',\n        value: '0.375',\n        defaultChecked: formState.volume.includes('0.375'),\n        textLabel: '0.375'\n      }, {\n        id: 'volume_0_5',\n        name: 'volume',\n        value: '0.5',\n        defaultChecked: formState.volume.includes('0.5'),\n        textLabel: '0.5'\n      }, {\n        id: 'volume_0_75',\n        name: 'volume',\n        value: '0.75',\n        defaultChecked: formState.volume.includes('0.75'),\n        textLabel: '0.75'\n      }, {\n        id: 'volume_1',\n        name: 'volume',\n        value: '1.0',\n        defaultChecked: formState.volume.includes('1.0'),\n        textLabel: '1'\n      }]\n    },\n    color: {\n      id: 'color',\n      title: 'Цвет',\n      type: 'checkbox',\n      onChange: handleCheckoutChange,\n      inputList: [{\n        id: 'colorRed',\n        name: 'color',\n        value: 'RED',\n        defaultChecked: formState.color.includes('red'),\n        textLabel: 'Красный'\n      }, {\n        id: 'colorWhite',\n        name: 'color',\n        value: 'WHITE',\n        defaultChecked: formState.color.includes('white'),\n        textLabel: 'Белый'\n      }, {\n        id: 'colorPink',\n        name: 'color',\n        value: 'ROSE',\n        defaultChecked: formState.color.includes('ROSE'),\n        textLabel: 'Розовый'\n      }, {\n        id: 'colorOrange',\n        name: 'color',\n        value: 'ORANGE',\n        defaultChecked: formState.color.includes('ORANGE'),\n        textLabel: 'Оранжевый'\n      }]\n    },\n    sugar: {\n      id: 'sugar',\n      title: 'Содержание сахара',\n      type: 'checkbox',\n      onChange: handleCheckoutChange,\n      inputList: [{\n        id: 'sugarDry',\n        name: 'sugar',\n        value: 'DRY',\n        defaultChecked: formState.sugar.includes('DRY'),\n        textLabel: 'Сухое'\n      }, {\n        id: 'sugarSemiDry',\n        name: 'sugar',\n        value: 'MEDIUM',\n        defaultChecked: formState.sugar.includes('MEDIUM'),\n        textLabel: 'Полусладкое'\n      }, {\n        id: 'sugarSweet',\n        name: 'sugar',\n        value: 'SWEET',\n        defaultChecked: formState.sugar.includes('SWEET'),\n        textLabel: 'Сладкое'\n      }, {\n        id: 'sugarMediumDry',\n        name: 'sugar',\n        value: 'MEDIUM_DRY',\n        defaultChecked: formState.sugar.includes('MEDIUM_DRY'),\n        textLabel: 'Полусухое'\n      }]\n    },\n    wineSort: {\n      id: 'wineSort',\n      title: 'Сорт',\n      type: 'checkbox',\n      onChange: handleCheckoutChange,\n      inputList: [{\n        id: 'sortMerlot',\n        name: 'sort',\n        value: 'Merlot',\n        defaultChecked: formState.sort.includes('Merlot'),\n        textLabel: 'Мерло'\n      }, {\n        id: 'sortCabernet',\n        name: 'sort',\n        value: 'Cabernet',\n        defaultChecked: formState.sort.includes('Cabernet'),\n        textLabel: 'Каберне'\n      }, {\n        id: 'sortCarmenere',\n        name: 'sort',\n        value: 'Carmenere',\n        defaultChecked: formState.sort.includes('Carmenere'),\n        textLabel: 'Карменер'\n      }, {\n        id: 'sortPetitVerdo',\n        name: 'sort',\n        value: 'PetitVerdo',\n        defaultChecked: formState.sort.includes('PetitVerdo'),\n        textLabel: 'Пти Вердо'\n      }]\n    },\n    countryFrom: {\n      id: 'countryFrom',\n      title: 'Страна',\n      type: 'checkbox',\n      onChange: handleCheckoutChange,\n      inputList: [{\n        id: 'countryItaly',\n        name: 'country',\n        value: 'Italy',\n        defaultChecked: formState.country.includes('Italy'),\n        textLabel: 'Италия'\n      }, {\n        id: 'countryFrance',\n        name: 'country',\n        value: 'France',\n        defaultChecked: formState.country.includes('France'),\n        textLabel: 'Франция'\n      }, {\n        id: 'countryPortugal',\n        name: 'country',\n        value: 'Portugal',\n        defaultChecked: formState.country.includes('Portugal'),\n        textLabel: 'Португалия'\n      }, {\n        id: 'countryColumbia',\n        name: 'country',\n        value: 'Columbia',\n        defaultChecked: formState.country.includes('Columbia'),\n        textLabel: 'Колумбия'\n      }]\n    },\n    regionFrom: {\n      id: 'regionFrom',\n      title: 'Регион',\n      type: 'checkbox',\n      onChange: handleCheckoutChange,\n      inputList: [{\n        id: 'regionTrentino',\n        name: 'region',\n        value: 'Trentino',\n        defaultChecked: formState.region.includes('Trentino'),\n        textLabel: 'Трентино'\n      }, {\n        id: 'regionNeapol',\n        name: 'region',\n        value: 'Neapol',\n        defaultChecked: formState.region.includes('Neapol'),\n        textLabel: 'Неаполь'\n      }, {\n        id: 'regionCorsica',\n        name: 'region',\n        value: 'Corsica',\n        defaultChecked: formState.region.includes('Corsica'),\n        textLabel: 'Корсика'\n      }, {\n        id: 'regionLimousin',\n        name: 'regionLimousin',\n        value: 'Limousin',\n        defaultChecked: formState.region.includes('Limousin'),\n        textLabel: 'Лимузен'\n      }]\n    },\n    sparkling: {\n      id: 'sparkling',\n      title: 'Игристость',\n      type: 'checkbox',\n      onChange: handleCheckoutChange,\n      inputList: [{\n        id: 'sparkling',\n        name: 'sparkling',\n        value: 'sparkling',\n        defaultChecked: formState.sparkling.includes('sparkling'),\n        textLabel: 'Игристое'\n      }, {\n        id: 'non-sparkling',\n        name: 'sparkling',\n        value: 'nonSparkling',\n        defaultChecked: formState.sparkling.includes('nonSparkling'),\n        textLabel: 'Не игристое'\n      }]\n    }\n  };\n  const list = Object.keys(inputGroupMap).map(inputGroup => {\n    const {\n      id,\n      type,\n      title,\n      onChange,\n      inputList\n    } = inputGroupMap[inputGroup];\n    return __jsx(\"li\", {\n      key: id\n    }, __jsx(InputContainer, {\n      title: title,\n      type: type,\n      inputList: inputList,\n      onChange: onChange\n    }));\n  });\n\n  const handleSubmit = event => {\n    // eslint-disable-next-line no-console\n    console.log(formState);\n    event.preventDefault();\n  };\n\n  const handleReset = () => {\n    setFormState(initialFormState);\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    onReset: handleReset,\n    className: \"jsx-824880811\" + \" \" + 'filter-list-container'\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: \"jsx-824880811\"\n  }, \"Submit\"), __jsx(\"div\", {\n    className: \"jsx-824880811\" + \" \" + 'filter-bar-title'\n  }, \"\\u0424\\u0438\\u043B\\u044C\\u0442\\u0440\\u044B\"), __jsx(\"div\", {\n    className: \"jsx-824880811\" + \" \" + 'filter-bar-subtitle'\n  }, \"WineUp\"), __jsx(\"ul\", {\n    className: \"jsx-824880811\" + \" \" + 'filter-list'\n  }, list), __jsx(\"button\", {\n    type: \"reset\",\n    className: \"jsx-824880811\" + \" \" + 'clear-filter-button'\n  }, __jsx(\"span\", {\n    className: \"jsx-824880811\" + \" \" + 'btn-text'\n  }, __jsx(\"span\", {\n    className: \"jsx-824880811\"\n  }, \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C \\u0444\\u0438\\u043B\\u044C\\u0442\\u0440\"), __jsx(\"img\", {\n    src: \"/assets/resetBtnIcon.svg\",\n    alt: \"reset\",\n    className: \"jsx-824880811\"\n  }))), __jsx(_JSXStyle, {\n    id: \"824880811\"\n  }, [\".filter-list-container.jsx-824880811{background-color:gray;background-image:url('assets/filterBackground.png');min-width:375px;overflow:hidden;height:100vh;}\", \".filter-list.jsx-824880811{margin-left:20px;overflow-y:auto;height:calc(100vh - 160px);width:100%;padding-right:20px;}\", \".filter-bar-title.jsx-824880811{color:white;font-weight:bold;font-size:44px;text-align:center;}\", \".filter-bar-subtitle.jsx-824880811{color:white;font-size:24px;text-align:right;margin-right:48px;}\", \".clear-filter-button.jsx-824880811{position:relative;height:60px;width:100%;border:none;outline:none;background-color:#931332;color:white;font-size:22px;cursor:pointer;}\", \".btn-text.jsx-824880811{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\", \".btn-text.jsx-824880811 span.jsx-824880811{margin:10px;}\", \"button[type='submit'].jsx-824880811{display:none;}\", \"@media all and (max-width:767px){.filter-list-container.jsx-824880811{width:100%;overflow:hidden;height:400px;}.filter-list.jsx-824880811{height:calc(400px - 160px);}}\"]));\n};\n\nexport default FilterBar;","map":null,"metadata":{},"sourceType":"module"}