{"ast":null,"code":"import axios from 'axios';\n\nclass Api {\n  constructor() {\n    this.request = axios.create({\n      baseURL: process.env.NEXT_PUBLIC_API\n    });\n  }\n\n  async login(data) {\n    const response = await this.sendRequest({\n      url: '/user-service/login',\n      method: 'POST',\n      data,\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n        Authorization: process.env.NEXT_PUBLIC_ACCESS_TOKEN\n      }\n    });\n\n    if (response.status !== 200) {\n      return {\n        error: true,\n        message: '[API]: LOGIN error'\n      };\n    }\n\n    return {\n      error: false,\n      user: response.data\n    };\n  }\n\n  async registration(data) {\n    const response = await this.sendRequest({\n      url: '/user-service/registration',\n      method: 'POST',\n      data,\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n        Authorization: process.env.NEXT_PUBLIC_ACCESS_TOKEN\n      }\n    });\n\n    if (response.status !== 200) {\n      return {\n        error: true,\n        message: '[API]: REGISTRATION error'\n      };\n    }\n\n    return {\n      error: false,\n      user: response.data\n    };\n  }\n\n  async refreshToken(refreshToken) {\n    const response = await this.sendRequest({\n      url: `/user-service/refresh?refreshToken=${refreshToken}`,\n      method: 'POST',\n      data: {},\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n        Authorization: process.env.NEXT_PUBLIC_ACCESS_TOKEN\n      }\n    });\n\n    if (response.status !== 200) {\n      throw new Error('Server Error');\n    }\n\n    return [response.data.accessToken, response.data.refreshToken];\n  }\n\n  async getAllWines(data) {\n    const response = await this.sendRequest({\n      url: '/catalog-service/position/true/',\n      method: 'POST',\n      data,\n      headers: {\n        accessToken: process.env.NEXT_PUBLIC_ACCESS_TOKEN,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.status !== 200) {\n      throw new Error('Server Error');\n    }\n\n    return response.data;\n  }\n\n  async getWineById(id) {\n    const response = await this.sendRequest({\n      url: `/catalog-service/position/true/byId/${id}`,\n      method: 'GET',\n      data: {},\n      headers: {\n        accessToken: process.env.NEXT_PUBLIC_ACCESS_TOKEN\n      }\n    });\n\n    if (response.status !== 200) {\n      throw new Error('Server Error');\n    }\n\n    return response.data;\n  }\n\n  async addWineToFavorites(id, token) {\n    const response = await this.sendRequest({\n      url: `/user-service/favorites/${id}`,\n      method: 'POST',\n      data: {},\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    if (response.status !== 200) {\n      throw new Error('Server Error');\n    }\n\n    return response.data;\n  }\n\n  async deleteWineFromFavorites(id, token) {\n    const response = await this.sendRequest({\n      url: `/user-service/favorites/${id}`,\n      method: 'DELETE',\n      data: {},\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    if (response.status !== 200) {\n      throw new Error('Server Error');\n    }\n\n    return response.data;\n  }\n\n  async deleteAllWinesFromFavorites(token) {\n    const response = await this.sendRequest({\n      url: '/user-service/favorites/clear',\n      method: 'DELETE',\n      data: {},\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    if (response.status !== 200) {\n      throw new Error('Server Error');\n    }\n\n    return response.data;\n  }\n\n  async getFavoritesWines(token) {\n    const response = await this.sendRequest({\n      url: '/user-service/favorites/list',\n      method: 'GET',\n      data: {},\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    if (response.status !== 200) {\n      throw new Error('Server Error');\n    }\n\n    return response.data;\n  }\n\n  async getFavoritesWinesByUserId(userId) {\n    const response = await this.sendRequest({\n      url: `/catalog-service/position/true/byId/${userId}`,\n      method: 'GET',\n      data: {},\n      headers: {\n        accessToken: process.env.NEXT_PUBLIC_ACCESS_TOKEN,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.status !== 200) {\n      throw new Error('Server Error');\n    }\n\n    return response.data;\n  }\n\n  async getProfile(accessToken) {\n    const response = await this.sendRequest({\n      url: '/user-service/users/me',\n      method: 'GET',\n      data: {},\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n\n    if (response.status === 403) {\n      return {\n        error: true,\n        message: '[API]: GETPROFILE - token expired'\n      };\n    }\n\n    return {\n      error: false,\n      profile: response.data\n    };\n  }\n\n  async sendRequest({\n    url,\n    method,\n    data,\n    headers\n  }) {\n    try {\n      const response = await this.request({\n        url,\n        method,\n        data,\n        headers\n      });\n      return response;\n    } catch (err) {\n      return {\n        error: true,\n        message: err.message,\n        data: err.response.data\n      };\n    }\n  }\n\n}\n\nexport default Api;","map":null,"metadata":{},"sourceType":"module"}