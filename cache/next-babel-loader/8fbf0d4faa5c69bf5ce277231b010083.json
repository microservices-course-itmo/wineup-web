{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useState } from 'react';\nimport CustomCheckBox from '../CustomCheckBox';\nimport InputPrice from '../InputPrice';\nimport ButtonGroup from '../ButtonGroup';\n/**\n * @param {string} type - 'checkbox' || 'number' || 'buttons'\n * @param {Array<Object>} inputList - Список полей ввода для этой группы\n * @param {function} onChange - Функция-обработчик изменений для этой группы полей ввода\n * @param props\n * @returns {JSX.Element} InputGroup - Список кастомных полей ввода одной группы\n */\n\nconst InputGroup = (_ref) => {\n  let {\n    type,\n    inputList,\n    onChange,\n    visible\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"type\", \"inputList\", \"onChange\", \"visible\"]);\n\n  let customInputList;\n\n  switch (type) {\n    case 'checkbox':\n      customInputList = inputList.map(checkbox => __jsx(\"li\", {\n        key: checkbox.id\n      }, __jsx(CustomCheckBox, {\n        checkbox: checkbox,\n        onChange: onChange\n      })));\n      break;\n\n    case 'buttons':\n      customInputList = __jsx(ButtonGroup, {\n        buttons: inputList,\n        onChange: onChange\n      });\n      break;\n\n    case 'number':\n      customInputList = __jsx(InputPrice, {\n        inputFrom: inputList[0],\n        inputTo: inputList[1],\n        currency: props.currency,\n        onChange: onChange\n      });\n      break;\n\n    default:\n      customInputList = __jsx(\"li\", {\n        className: `${type} default`\n      });\n      break;\n  }\n\n  const fullWidth = type === 'number';\n  return __jsx(React.Fragment, null, __jsx(\"ul\", {\n    className: \"jsx-1447037103\" + \" \" + `input-list${visible ? '' : '-invisible'} ${fullWidth ? 'full-width' : ''}`\n  }, customInputList), __jsx(_JSXStyle, {\n    id: \"1447037103\"\n  }, [\".input-list.jsx-1447037103{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;margin:0 auto;width:165px;}\", \".input-list-invisible.jsx-1447037103{display:none;}\", \".full-width.jsx-1447037103{width:100%;}\"]));\n};\n\nconst InputContainer = ({\n  title,\n  type,\n  inputList,\n  onChange\n}) => {\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(true);\n\n  const handleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"jsx-45878258\" + \" \" + 'criteria-title'\n  }, title), __jsx(\"div\", {\n    className: \"jsx-45878258\" + \" \" + 'list-container'\n  }, __jsx(InputGroup, {\n    type: type,\n    inputList: inputList,\n    onChange: onChange,\n    visible: isOpen\n  }), __jsx(\"button\", {\n    onClick: handleClick,\n    type: \"button\",\n    className: \"jsx-45878258\" + \" \" + 'arrow-btn'\n  }, __jsx(\"img\", {\n    src: `assets/arrow${isOpen ? 'Up' : 'Down'}.svg`,\n    alt: \"arrow\",\n    className: \"jsx-45878258\" + \" \" + ` arrow-${isOpen ? 'up' : 'down'}`\n  }))), __jsx(_JSXStyle, {\n    id: \"45878258\"\n  }, [\".list-container.jsx-45878258{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}\", \".criteria-title.jsx-45878258{color:white;font-size:22px;font-weight:bold;}\", \".arrow-btn.jsx-45878258{background-color:transparent;border:none;outline:none;cursor:pointer;padding:10px;}\"]));\n};\n\nexport default InputContainer;","map":null,"metadata":{},"sourceType":"module"}